generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Agent {
  AgentId    Int        @id @default(autoincrement())
  AwsId      String?    @unique
  Username   String?    @unique
  UserRoleId Int?
  UserRole   UserRole?  @relation(fields: [UserRoleId], references: [UserRoleID], onDelete: Restrict, onUpdate: Restrict, map: "agent_ibfk_1")
  Customer   Customer[]

  AgentGroupId Int?

  CustomerAuditlogs        CustomerAuditLogs[]
  FormVisibilityStatus     FormVisibilityStatus[]
  Note                     Note[]
  TransactionAgent         TransactionAgent[]
  CSVExportTransactionLogs CSVExportTransactionLogs[]
  AssignedWallet           AssignedWallet[]
  AssignedAgents           AssignedAgent[]
  FollowUpComment          FollowUpComment[]

  @@index([UserRoleId], map: "UserRoleId")
  @@index([AgentId], map: "idx_agent_id")
}

model BaseCountry {
  BaseCountryID   Int             @id @default(autoincrement())
  BaseCountryName String          @unique(map: "BaseCountryName") @db.VarChar(191)
  ExchangeRates   ExchangeRates[]
  Fundraiser      Fundraiser[]
  Customer        Customer[]
}

model Currency {
  CurrencyId                    Int                             @id @default(autoincrement())
  CurrencyCode                  String?                         @db.VarChar(10)
  ExchangeRates                 ExchangeRates[]
  Fundraiser_AcceptedCurrencies Fundraiser_AcceptedCurrencies[]
  MinimumAmount                 MinimumAmount[]
  Wallet                        Wallet[]
}

model Customer {
  CustomerId  Int       @id @default(autoincrement())
  Name        String?   @db.VarChar(255)
  Email       String?   @db.VarChar(255)
  ManyChatId  String?   @db.VarChar(255)
  ExpireDate  DateTime? @db.Date
  UserCountry Int?
  ContactLink String?   @db.VarChar(255)
  AgentId     Int?
  CardID      Int?

  Agent             Agent?              @relation(fields: [AgentId], references: [AgentId], onDelete: Restrict, onUpdate: Restrict, map: "customer_ibfk_1")
  CustomerAuditLogs CustomerAuditLogs[]
  ManyChat          ManyChat[]
  Transactions      Transactions[]
  Subscriptions     Subscription[]
  FollowUpStatus    CustomerFollowUpStatus[]
  FollowUpComment FollowUpComment[] @relation("followUpComment_customer_fk")

  BaseCountry BaseCountry? @relation(fields: [UserCountry], references: [BaseCountryID], map: "BaseCountryID")

  @@index([AgentId], map: "AgentId")
  @@index([UserCountry], map: "BaseCountryID")

  @@index([CustomerId], map: "idx_customer_id")
  @@index([Name], map: "idx_customer_name")
}

model Subscription {
  SubscriptionID Int      @id @default(autoincrement())
  CustomerID     Int
  StartDate      DateTime @db.Date
  EndDate        DateTime @db.Date
  CreateAt       DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt      DateTime @default(now()) @db.Timestamp(0)
  Customer       Customer @relation(fields: [CustomerID], references: [CustomerId], onDelete: Cascade, onUpdate: Restrict, map: "subscription_ibfk_1")

  @@index([CustomerID], map: "CustomerID")

  @@index([CustomerID, EndDate(sort: Desc)], map: "idx_subscription_customer_enddate")
  @@index([EndDate], map: "idx_subscription_enddate_range")
  @@index([CustomerID, StartDate, EndDate], map: "idx_subscription_customer_dates")
}

model CustomerAuditLogs {
  LogId        Int                            @id @default(autoincrement())
  AgentId      Int
  FieldChanged CustomerAuditLogs_FieldChanged
  OldValue     String?                        @db.VarChar(255)
  NewValue     String?                        @db.VarChar(255)
  CustomerId   Int
  ChangeDate   DateTime                       @default(now()) @db.Timestamp(0)
  Agent        Agent                          @relation(fields: [AgentId], references: [AgentId], onDelete: Cascade, onUpdate: Restrict, map: "fk_agent")
  Customer     Customer                       @relation(fields: [CustomerId], references: [CustomerId], onDelete: Cascade, onUpdate: Restrict, map: "fk_customer")

  @@index([AgentId], map: "fk_agent")
  @@index([CustomerId], map: "fk_customer")
}

model ExchangeRates {
  ExchangeRateId Int         @id @default(autoincrement())
  BaseCountryId  Int
  CurrencyId     Int
  ExchangeRate   Decimal     @db.Decimal(12, 5)
  CreateAt       DateTime    @default(now()) @db.Timestamp(0)
  UpdatedAt      DateTime    @default(now()) @db.Timestamp(0)
  BaseCountry    BaseCountry @relation(fields: [BaseCountryId], references: [BaseCountryID], onDelete: Cascade, onUpdate: Restrict, map: "fk_basecountry")
  Currency       Currency    @relation(fields: [CurrencyId], references: [CurrencyId], onDelete: Cascade, onUpdate: Restrict, map: "fk_currency")

  @@index([BaseCountryId], map: "fk_basecountry")
  @@index([CurrencyId], map: "fk_currency")
}

model FormStatus {
  FormStatusID        Int                @id @default(autoincrement())
  TransactionID       Int?
  TransactionStatusID Int?
  Transactions        Transactions?      @relation(fields: [TransactionID], references: [TransactionID], onDelete: Restrict, onUpdate: Restrict, map: "formstatus_ibfk_1")
  TransactionStatus   TransactionStatus? @relation(fields: [TransactionStatusID], references: [TransactionStatusID], onDelete: Restrict, onUpdate: Restrict, map: "formstatus_ibfk_2")

  @@index([TransactionID], map: "TransactionID")
  @@index([TransactionStatusID], map: "TransactionStatusID")
}

model FormVisibilityStatus {
  VisibilityStatusId Int      @id @default(autoincrement())
  AgentId            Int
  IsFormOpen         Boolean
  FormTimeStamp      DateTime @default(now()) @db.Timestamp(0)
  Agent              Agent    @relation(fields: [AgentId], references: [AgentId], onDelete: Cascade, onUpdate: Restrict, map: "formvisibilitystatus_ibfk_1")

  @@index([AgentId], map: "AgentId")
}

model Fundraiser {
  FundraiserID                  Int                             @id @default(autoincrement())
  FundraiserName                String                          @db.VarChar(255)
  FundraiserEmail               String?                         @db.VarChar(191)
  FundraiserLogo                String?                         @db.VarChar(255)
  BaseCountryID                 Int?
  FundraiserCentralID           Int?
  BaseCountry                   BaseCountry?                    @relation(fields: [BaseCountryID], references: [BaseCountryID], onUpdate: Restrict, map: "fundraiser_ibfk_1")
  Fundraiser_AcceptedCurrencies Fundraiser_AcceptedCurrencies[]
  fundraiser_contactlinks       Fundraiser_ContactLinks[]

  @@index([BaseCountryID], map: "BaseCountryID")
}

model Fundraiser_AcceptedCurrencies {
  FundraiserAcceptedCurrencyID Int         @id @default(autoincrement())
  FundraiserID                 Int?
  CurrencyID                   Int?
  Fundraiser                   Fundraiser? @relation(fields: [FundraiserID], references: [FundraiserID], onDelete: Cascade, onUpdate: Restrict, map: "fundraiser_acceptedcurrencies_ibfk_1")
  Currency                     Currency?   @relation(fields: [CurrencyID], references: [CurrencyId], onDelete: Cascade, onUpdate: Restrict, map: "fundraiser_acceptedcurrencies_ibfk_2")

  @@index([CurrencyID], map: "CurrencyID")
  @@index([FundraiserID], map: "FundraiserID")
}

model Fundraiser_ContactLinks {
  ContactID    Int         @id @default(autoincrement())
  FundraiserID Int?
  PlatformID   Int?
  ContactURL   String      @db.VarChar(255)
  Fundraiser   Fundraiser? @relation(fields: [FundraiserID], references: [FundraiserID], onDelete: Cascade, onUpdate: Restrict, map: "fundraiser_contactlinks_ibfk_1")
  Platform     Platform?   @relation(fields: [PlatformID], references: [PlatformID], onDelete: Cascade, onUpdate: Restrict, map: "fundraiser_contactlinks_ibfk_2")

  @@index([FundraiserID], map: "FundraiserID")
}

model ManyChat {
  ManyChatId     Int      @id @default(autoincrement())
  ConversationId String   @unique
  CustomerId     Int
  CreateAt       DateTime @default(now()) @db.Timestamp(0)
  UpdateAt       DateTime @default(now()) @db.Timestamp(0)
  Customer       Customer @relation(fields: [CustomerId], references: [CustomerId], onDelete: Cascade, onUpdate: Restrict, map: "fk_manychat_customer")

  @@index([CustomerId], map: "fk_manychat_customer")
}

model MinimumAmount {
  MinimumAmountId Int      @id @default(autoincrement())
  CurrencyId      Int
  Amount          Decimal  @db.Decimal(12, 2)
  CreateAt        DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt       DateTime @default(now()) @db.Timestamp(0)
  Currency        Currency @relation(fields: [CurrencyId], references: [CurrencyId], onDelete: Cascade, onUpdate: Restrict, map: "minimumamount_ibfk_1")

  @@index([CurrencyId], map: "CurrencyId")
}

model Note {
  NoteID       Int            @id @default(autoincrement())
  Note         String?        @db.VarChar(255)
  Date         DateTime?      @db.Date
  AgentID      Int?
  Agent        Agent?         @relation(fields: [AgentID], references: [AgentId], onDelete: Restrict, onUpdate: Restrict, map: "note_ibfk_1")
  Transactions Transactions[]

  @@index([AgentID], map: "AgentID")
}

model Platform {
  PlatformID   Int    @id @default(autoincrement())
  PlatformName String @unique(map: "PlatformName") @db.VarChar(191)

  Fundraiser_ContactLinks Fundraiser_ContactLinks[] @relation(map: "fundraiser_contactlinks_ibfk_2")
}

model ScreenShot {
  ScreenShotID   Int           @id @default(autoincrement())
  TransactionID  Int?
  ScreenShotLink String?       @db.VarChar(2048)
  Transactions   Transactions? @relation(fields: [TransactionID], references: [TransactionID], onDelete: Restrict, onUpdate: Restrict, map: "screenshot_ibfk_1")

  @@index([TransactionID], map: "TransactionID")
}

model SupportRegion {
  SupportRegionID Int            @id @default(autoincrement())
  Region          String?        @db.VarChar(255)
  Transactions    Transactions[]
}

model TransactionAgent {
  TransactionAgentID Int           @id @default(autoincrement())
  TransactionID      Int?
  AgentID            Int?
  LogDate            DateTime      @default(now()) @db.Timestamp(0)
  Transactions       Transactions? @relation(fields: [TransactionID], references: [TransactionID], onDelete: Restrict, onUpdate: Restrict, map: "transactionagent_ibfk_1")
  Agent              Agent?        @relation(fields: [AgentID], references: [AgentId], onDelete: Restrict, onUpdate: Restrict, map: "transactionagent_ibfk_2")

  @@index([AgentID], map: "AgentID")
  @@index([TransactionID], map: "TransactionID")

  @@index([TransactionID, LogDate(sort: Desc)], map: "idx_transaction_agent_transaction_date")
  @@index([AgentID], map: "idx_transaction_agent_agent")
}

model Transactions {
  TransactionID    Int                @id @default(autoincrement())
  CustomerID       Int?
  SupportRegionID  Int?
  WalletID         Int?
  Amount           Float?             @db.Float
  PaymentCheck     Boolean?
  PaymentCheckTime DateTime?          @db.Timestamp(0)
  NoteID           Int?
  TransactionDate  DateTime           @default(now()) @db.Timestamp(0)
  PaymentDenied    Boolean?
  Month            Int?
  HopeFuelID       Int?
  FormStatus       FormStatus[]
  Screenshot       ScreenShot[]
  TransactionAgent TransactionAgent[]
  Customer         Customer?          @relation(fields: [CustomerID], references: [CustomerId], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_1")
  SupportRegion    SupportRegion?     @relation(fields: [SupportRegionID], references: [SupportRegionID], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_2")
  Wallet           Wallet?            @relation(fields: [WalletID], references: [WalletId], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_3")
  Note             Note?              @relation(fields: [NoteID], references: [NoteID], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_4")

  @@index([CustomerID], map: "CustomerID")
  @@index([NoteID], map: "NoteID")
  @@index([SupportRegionID], map: "SupportRegionID")
  @@index([WalletID], map: "WalletID")

  @@index([CustomerID, TransactionDate(sort: Desc)], map: "idx_transactions_customer_date")
  @@index([TransactionDate(sort: Desc)], map: "idx_transactions_date")
  @@index([CustomerID, TransactionDate(sort: Desc)], map: "idx_transaction_customer_agent")
}

model TransactionStatus {
  TransactionStatusID Int          @id @default(autoincrement())
  TransactionStatus   String       @unique @db.VarChar(255)
  FormStatus          FormStatus[]
}

model UserRole {
  UserRoleID Int     @id @default(autoincrement())
  UserRole   String? @db.VarChar(255)
  Agent      Agent[]
}

model Wallet {
  WalletId       Int              @id @default(autoincrement())
  CurrencyId     Int?
  WalletName     String?          @db.VarChar(255)
  Transactions   Transactions[]
  AssignedWallet AssignedWallet[]
  Currency       Currency?        @relation(fields: [CurrencyId], references: [CurrencyId], onDelete: Restrict, onUpdate: Restrict, map: "wallet_ibfk_1")

  @@index([CurrencyId], map: "CurrencyId")
}

model CSVExportTransactionLogs {
  CSVExportTransactionLogsId   Int       @id @default(autoincrement())
  AgentId                      Int?
  CSVExportTransactionDateTime DateTime? @db.Timestamp(0)
  CSVExportTransactionFileName String?   @db.VarChar(255)
  FromDate                     DateTime? @db.Date
  ToDate                       DateTime? @db.Date

  Agent Agent? @relation(fields: [AgentId], references: [AgentId])

  @@index([AgentId], map: "AgentId")
}

model AgentGroup {
  AgentGroupID   Int             @id @default(autoincrement())
  GroupName      String          @unique
  AssignedAgents AssignedAgent[]
}

model AssignedAgent {
  AssignedAgentId Int @id @default(autoincrement())
  AgentId         Int
  AgentGroupID    Int

  Agent      Agent      @relation(fields: [AgentId], references: [AgentId])
  AgentGroup AgentGroup @relation(fields: [AgentGroupID], references: [AgentGroupID])

  @@unique([AgentId, AgentGroupID])
}

model AssignedWallet {
  AssignedWalletId Int @id @default(autoincrement())
  WalletId         Int
  AgentId          Int

  Agent  Agent?  @relation(fields: [AgentId], references: [AgentId], onDelete: Cascade, onUpdate: Restrict, map: "assignedwallet_ibfk_2")
  Wallet Wallet? @relation(fields: [WalletId], references: [WalletId], onDelete: Cascade, onUpdate: Restrict, map: "assignedwallet_ibfk_1")

  @@unique([AgentId, WalletId], map: "AgentId_WalletId")
  @@index([AgentId], map: "AgentId")
  @@index([WalletId], map: "WalletId")
}

model FollowUpStatus {
  FollowUpStatusID Int      @id @default(autoincrement())
  StatusName       String   @unique @db.VarChar(255)
  FollowUpStatus   CustomerFollowUpStatus[]
}

model CustomerFollowUpStatus {
  CustomerFollowUpStatusID Int              @id @default(autoincrement())
  CustomerID               Int
  FollowUpStatusID         Int
  FollowUpDate             DateTime         @default(now()) @db.Timestamp(0)
  Customer                 Customer         @relation(fields: [CustomerID], references: [CustomerId], onDelete: Cascade, onUpdate: Restrict, map: "customerfollowupstatus_ibfk_1")
  FollowUpStatus           FollowUpStatus   @relation(fields: [FollowUpStatusID], references: [FollowUpStatusID], onDelete: Cascade, onUpdate: Restrict, map: "customerfollowupstatus_ibfk_2")

  @@index([CustomerID], map: "CustomerID")
  @@index([FollowUpStatusID], map: "FollowUpStatusID")

  @@index([CustomerID, FollowUpDate(sort: Desc)], map: "idx_customer_followup_status_customer_date")
  @@index([FollowUpDate(sort: Desc)], map: "idx_customer_followup_status_date")
  @@unique([CustomerID], map: "unique_customer_latest_status")
}

model FollowUpComment {
  Id Int @id @default(autoincrement())
  AgentId Int
  CustomerID Int
  Comment String
  Is_Resolved Boolean @default(false)
  CreatedAt DateTime @default(now()) @db.Timestamp(0)

  Agent  Agent?  @relation(fields: [AgentId], references: [AgentId], onDelete: Cascade, onUpdate: Restrict, map: "followUpComment_agent_fk")
  Customer Customer @relation("followUpComment_customer_fk", fields: [CustomerID], references: [CustomerId], onDelete: Cascade, onUpdate: Restrict)

  @@index([CustomerID, CreatedAt(sort: Desc)], map: "idx_followup_comment_customer_date")
  @@index([CreatedAt(sort: Desc)], map: "idx_followup_comment_date")
}

model FaqCategory {
  Id Int @id @default(autoincrement())
  Name String
  CreatedAt DateTime @default(now()) @db.Timestamp(0)

  Faq Faq[] @relation("faqCategory_fk")
}

model Faq {
  Id Int @id @default(autoincrement())
  CategoryId Int
  Question String @db.LongText
  Explanation String @db.LongText
  Response String @db.LongText

  FaqCategory FaqCategory @relation("faqCategory_fk", fields: [CategoryId], references: [Id])

  FaqImage FaqImage[] @relation("faq_fk")
}

model FaqImage {
  Id Int @id @default(autoincrement())
  FaqId Int
  ImageLink String @db.LongText
  Type String

  Faq Faq @relation("faq_fk", fields: [FaqId], references: [Id])
}

enum CustomerAuditLogs_FieldChanged {
  Name
  Email
  UserCountry
  CardID
}
